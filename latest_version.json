{
	"info": {
		"_postman_id": "f1ba7b75-1c98-4b9a-9432-70e20573816f",
		"name": "TrelloAPI",
		"description": "[https://www.postman.com/templates/78475d97-9a36-4731-ab24-9adf6a94d0fb/Conditional-workflow](https://www.postman.com/templates/78475d97-9a36-4731-ab24-9adf6a94d0fb/Conditional-workflow)\n\n**Response'un schema kontrolü:**\n\n- [https://learning.postman.com/docs/tests-and-scripts/write-scripts/postman-sandbox-api-reference/#validate-response-data-with-a-json-schema](https://learning.postman.com/docs/tests-and-scripts/write-scripts/postman-sandbox-api-reference/#validate-response-data-with-a-json-schema)\n    \n\n**İstenilirse, Collection Run yapıldığında spesifik bir request ard arda tetiklenebilir.(Belirtilen request'in ismi verilerek bu gerçekleşir. Manuel olarak \"Send\" tetiklendiğinde bu method geçersizdir:**\n\n- [https://learning.postman.com/docs/tests-and-scripts/write-scripts/postman-sandbox-api-reference/#script-workflows](https://learning.postman.com/docs/tests-and-scripts/write-scripts/postman-sandbox-api-reference/#script-workflows)\n    \n\n**Excel datası yükleyerek yapma:**\n\n- [https://learning.postman.com/docs/collections/running-collections/working-with-data-files/](https://learning.postman.com/docs/collections/running-collections/working-with-data-files/)\n    \n- [https://www.postman.com/templates/6a8f6393-58ab-4458-944c-7fc8f08448da/Run-collection-with-data-file](https://www.postman.com/templates/6a8f6393-58ab-4458-944c-7fc8f08448da/Run-collection-with-data-file)\n    \n\n**Script içerisinden kod ile \"istek\" atma:**\n\n- [https://learning.postman.com/docs/tests-and-scripts/write-scripts/postman-sandbox-api-reference/#script-with-request-data](https://learning.postman.com/docs/tests-and-scripts/write-scripts/postman-sandbox-api-reference/#script-with-request-data)\n    \n- [https://learning.postman.com/docs/tests-and-scripts/write-scripts/postman-sandbox-api-reference/#send-requests-from-scripts](https://learning.postman.com/docs/tests-and-scripts/write-scripts/postman-sandbox-api-reference/#send-requests-from-scripts)\n    \n\n**Eğer İstek atlanmak istiyorsa, pre-request içerisinde kullanılabilir:**\n\n- [https://learning.postman.com/docs/tests-and-scripts/write-scripts/postman-sandbox-api-reference/#skip-request-run-from-pre-request-scripts](https://learning.postman.com/docs/tests-and-scripts/write-scripts/postman-sandbox-api-reference/#skip-request-run-from-pre-request-scripts)\n    \n\n## [Execution order of scripts](https://learning.postman.com/docs/tests-and-scripts/write-scripts/intro-to-scripts/#execution-order-of-scripts)\n\nIn Postman, the script execution order for a single request looks like this:\n\n- A pre-request script associated with a request will execute before the request is sent\n    \n- A post-response script associated with a request will execute after the request is sent\n    \n\n<img src=\"https://assets.postman.com/postman-docs/v11/req-resp-v11.jpg\" alt=\"Workflow for single request\">\n\n---\n\n- **Global Variables:** Tüm koleksiyonlar ve istekler için geçerli; uygulama genelinde kullanılabilir.\n    \n- **Collection Variables:** Sadece belirli bir koleksiyonda geçerli; koleksiyona özgü bilgileri depolar.\n    \n- **Environment Variables:** Belirli bir ortamda geçerli; farklı ortamlar için farklı değerler atanabilir\n    \n\nEndFragment\n\nStartFragment\n\n### Kullanım Senaryosu\n\n- Eğer bir API anahtarını tüm Postman projelerinde kullanıyorsanız, bunu **global variable** olarak tanımlarsınız.\n    \n- Eğer bir API'nin farklı test senaryoları için farklı kimlik bilgilerine ihtiyacı varsa, bunları **collection variable** olarak tanımlarsınız.\n    \n- Geliştirme, test ve üretim ortamları için farklı URL'ler kullanıyorsanız, bu URL'leri **environment variable** olarak tanımlayabilirsiniz.\n    \n\nEndFragment\n\nStartFragment\n\n### Değişken Kullanım Önceliği\n\n1. **Environment Variables:** Eğer bir ortam değişkeni tanımlanmışsa, bu en yüksek önceliğe sahiptir. Yani, istek atıldığında aynı isimde bir environment variable varsa, bu kullanılacaktır.\n    \n2. **Collection Variables:** Eğer ortam değişkeni yoksa veya kullanılmıyorsa, bir koleksiyon değişkeni varsa, bu ikinci sırada kullanılacaktır.\n    \n3. **Global Variables:** Eğer yukarıdaki iki katmanda değişken yoksa, global variable kullanılır.\n    \n\nEndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16347668"
	},
	"item": [
		{
			"name": "Board Requests",
			"item": [
				{
					"name": "[BOARD] Create a Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const neww = pm.require('@speeding-eclipse-222630/neww');\r",
									"let randomName = neww.generateRandomNameForBoard(length=10)\r",
									"\r",
									"pm.environment.set(\"temporary_variable_board_name\", randomName)\r",
									"\r",
									"//happy path - dolu isim gönderilerek başarılı bir board oluşturulur\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    pm.environment.set(\"board_name\", pm.environment.get('temporary_variable_board_name'))\r",
									"}\r",
									"\r",
									"//sad path - Boş isim gönderilerek hata alınır\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set(\"board_name\", '')\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {
									"@speeding-eclipse-222630/neww": {
										"id": "0192ce4c-2ff9-73db-8a3b-e0d59696f140"
									}
								}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// response JSON'ı çekilir.\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    //Headers Controlü yapılır.\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır.\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"desc\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"descData\":{\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"closed\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"idOrganization\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"idEnterprise\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"pinned\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"url\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"shortUrl\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"prefs\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\":{\r",
									"                        \"permissionLevel\":{\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"hideVotes\":{\r",
									"                            \"type\": \"boolean\"\r",
									"                        }, \r",
									"                        \"voting\":{\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"comments\":{\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"invitations\":{\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"selfJoin\":{\r",
									"                            \"type\": \"boolean\"\r",
									"                        },\r",
									"                        \"cardCovers\":{\r",
									"                            \"type\": \"boolean\"\r",
									"                        },                \r",
									"                        \"cardCounts\":{\r",
									"                            \"type\": \"boolean\"\r",
									"                        },                  \r",
									"                        \"isTemplate\":{\r",
									"                            \"type\": \"boolean\"\r",
									"                        },                   \r",
									"                        \"cardAging\":{\r",
									"                            \"type\": \"string\"\r",
									"                        },            \r",
									"                        \"calendarFeedEnabled\":{\r",
									"                            \"type\": \"boolean\"\r",
									"                        },\r",
									"                        \"hiddenPluginBoardButtons\":{\r",
									"                            \"type\": \"array\"\r",
									"                        },\r",
									"                        \"switcherViews\":{\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\":{\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\r",
									"                                    \"viewType\": {\"type\": \"string\"},\r",
									"                                    \"enabled\": {\"type\": \"boolean\"}\r",
									"                                },\r",
									"                                \"required\": [\"viewType\", \"enabled\"]\r",
									"                            }\r",
									"                        },\r",
									"                        \"background\": { \"type\": [\"string\"] },\r",
									"                    \"backgroundColor\": { \"type\": [\"string\"] },\r",
									"                    \"backgroundImage\": {\r",
									"                \"oneOf\": [\r",
									"                    { \"type\": \"string\" },\r",
									"                    { \"type\": \"null\" }\r",
									"                ]\r",
									"            },\r",
									"                    \"backgroundTile\": { \"type\": [\"boolean\"] },\r",
									"                    \"backgroundBrightness\": { \"type\": [\"string\"] },\r",
									"                    \"sharedSourceUrl\": {\r",
									"                \"oneOf\": [\r",
									"                    { \"type\": \"string\" },\r",
									"                    { \"type\": \"null\" }\r",
									"                ]\r",
									"            },\r",
									"                    \"backgroundImageScaled\": {\r",
									"                \"oneOf\": [\r",
									"                    { \"type\": \"string\" },\r",
									"                    { \"type\": \"null\" }\r",
									"                ]\r",
									"            },\r",
									"                    \"backgroundBottomColor\": { \"type\": [\"string\"] },\r",
									"                    \"backgroundTopColor\": { \"type\": [\"string\"] },\r",
									"                    \"canBePublic\": { \"type\": [\"boolean\"] },\r",
									"                    \"canBeEnterprise\": { \"type\": [\"boolean\"] },\r",
									"                    \"canBeOrg\": { \"type\": [\"boolean\"] },\r",
									"                    \"canBePrivate\": { \"type\": [\"boolean\"] },\r",
									"                    \"canInvite\": { \"type\": [\"boolean\"] }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"permissionLevel\",\r",
									"                    \"hideVotes\",\r",
									"                    \"voting\",\r",
									"                    \"comments\",\r",
									"                    \"invitations\",\r",
									"                    \"selfJoin\",\r",
									"                    \"cardCovers\",\r",
									"                    \"cardCounts\",\r",
									"                    \"isTemplate\",\r",
									"                    \"cardAging\",\r",
									"                    \"calendarFeedEnabled\",\r",
									"                    \"hiddenPluginBoardButtons\",\r",
									"                    \"switcherViews\",\r",
									"                    \"background\",\r",
									"                    \"backgroundColor\",\r",
									"                    \"backgroundTile\",\r",
									"                    \"backgroundBrightness\",\r",
									"                    \"backgroundBottomColor\",\r",
									"                    \"backgroundTopColor\",\r",
									"                    \"canBePublic\",\r",
									"                    \"canBeEnterprise\",\r",
									"                    \"canBeOrg\",\r",
									"                    \"canBePrivate\",\r",
									"                    \"canInvite\"\r",
									"                ]\r",
									"            },\r",
									"            \"labelNames\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"green\": { \"type\": [\"string\"] },\r",
									"                    \"yellow\": { \"type\": [\"string\"] },\r",
									"                    \"orange\": { \"type\": [\"string\"] },\r",
									"                    \"red\": { \"type\": [\"string\"] },\r",
									"                    \"purple\": { \"type\": [\"string\"] },\r",
									"                    \"blue\": { \"type\": [\"string\"] },\r",
									"                    \"sky\": { \"type\": [\"string\"] },\r",
									"                    \"lime\": { \"type\": [\"string\"] },\r",
									"                    \"pink\": { \"type\": [\"string\"] },\r",
									"                    \"black\": { \"type\": [\"string\"] },\r",
									"                    \"green_dark\": { \"type\": [\"string\"] },\r",
									"                    \"yellow_dark\": { \"type\": [\"string\"] },\r",
									"                    \"orange_dark\": { \"type\": [\"string\"] },\r",
									"                    \"red_dark\": { \"type\": [\"string\"] },\r",
									"                    \"purple_dark\": { \"type\": [\"string\"] },\r",
									"                    \"blue_dark\": { \"type\": [\"string\"] },\r",
									"                    \"sky_dark\": { \"type\": [\"string\"] },\r",
									"                    \"lime_dark\": { \"type\": [\"string\"] },\r",
									"                    \"pink_dark\": { \"type\": [\"string\"] },\r",
									"                    \"black_dark\": { \"type\": [\"string\"] },\r",
									"                    \"green_light\": { \"type\": [\"string\"] },\r",
									"                    \"yellow_light\": { \"type\": [\"string\"] },\r",
									"                    \"orange_light\": { \"type\": [\"string\"] },\r",
									"                    \"red_light\": { \"type\": [\"string\"] },\r",
									"                    \"purple_light\": { \"type\": [\"string\"] },\r",
									"                    \"blue_light\": { \"type\": [\"string\"] },\r",
									"                    \"sky_light\": { \"type\": [\"string\"] },\r",
									"                    \"lime_light\": { \"type\": [\"string\"] },\r",
									"                    \"pink_light\": { \"type\": [\"string\"] },\r",
									"                    \"black_light\": { \"type\": [\"string\"] }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"desc\",\r",
									"            \"descData\",\r",
									"            \"closed\",\r",
									"            \"idOrganization\",\r",
									"            \"url\",\r",
									"            \"shortUrl\",\r",
									"            \"prefs\",\r",
									"            \"labelNames\"\r",
									"        ]\r",
									"    };\r",
									"\r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"\r",
									"    //Elde edilen Board ID, environment:board_id değişkeni güncellenir.\r",
									"    pm.environment.set(\"board_id\", jsonData.id)\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if(pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    //Sonraki akışta environment:board_name ile ilgili bir sorun çıkmaması için, yeni bir randomName tanımladım ve ilgili environment için set'ledim.\r",
									"    pm.environment.set(\"board_name\", pm.environment.get('temporary_variable_board_name'))\r",
									"\r",
									"    //Başarısız istek sonucu bir Board oluşturduğumuz için, bu kısımda Send-Request ile yeni bir Board oluşturuyoruz ve bu board'dan elde edilen \"board_id\"'yi, environment:board_id güncellenir.\r",
									"    let randomNameForBoardSendRequest = \"Random Name\";\r",
									"    let token = pm.collectionVariables.get('token');\r",
									"    let key = pm.collectionVariables.get('key');\r",
									"\r",
									"    let url = `https://api.trello.com/1/boards/?name=${randomNameForBoardSendRequest}&token=${token}&key=${key}`;\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: url,\r",
									"        method: \"POST\"\r",
									"    }, function (err, response) {\r",
									"        if (err) {\r",
									"            console.log('Hata:', err);\r",
									"            return;\r",
									"        }\r",
									"        const jsonData = response.json();\r",
									"        pm.environment.set('board_id', jsonData.id)\r",
									"        });\r",
									"\r",
									"    // Status Code kontrolü yapılır. 400 beklenir. Burada aslında pm.response.to.have kısmı, sendRequest ile atılan isteği değil, normal atılan Postman İsteğinin sonucunu kontrol eder.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"    \r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, message & error occurred,\", function () {\r",
									"        pm.expect(jsonData.message).to.equal('invalid value for name')\r",
									"        pm.expect(jsonData.error).to.equal('ERROR')\r",
									"        });\r",
									"        \r",
									"    //Headers Controlü yapılır.\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"        });\r",
									"}\r",
									"\r",
									"//Bir sonraki tetiklenecek İsteği belirtiriz.\r",
									"pm.execution.setNextRequest('[BOARD] Get a Board')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/?name={{board_name}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "{{board_name}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request POST \\\r\n  --url 'https://api.trello.com/1/boards/?name={name}&key=APIKey&token=APIToken'"
					},
					"response": []
				},
				{
					"name": "[BOARD] Get a Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path - board_id önceki istekten environmentta güncellenmiş olarak var olacak. Burada da bu isteği başarısız atabilmemiz için, \"board_id\"nin \"null\" değerine eşit olması lazım. En sonunda tüm testlerimiz bu istek için biteceği zaman, board_id'nin \"null\" değil en baştaki değeri alabilmesi için, değer ilk öcne geçici environment:temporary_variable_board_id değerine atanır, sonrasında Post-Response içerisinden tekrardan environment:temporary_variable_board_id içerisine atanır.\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set('temporary_variable_board_id', pm.environment.get('board_id'))\r",
									"    pm.environment.set(\"board_id\", null)\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    \r",
									"    //Headers Controlü yapılır\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"desc\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"descData\":{\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"object\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"closed\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"idOrganization\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"idEnterprise\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"pinned\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"url\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"shortUrl\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"prefs\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\":{\r",
									"                        \"permissionLevel\":{\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"hideVotes\":{\r",
									"                            \"type\": \"boolean\"\r",
									"                        }, \r",
									"                        \"voting\":{\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"comments\":{\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"invitations\":{\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"selfJoin\":{\r",
									"                            \"type\": \"boolean\"\r",
									"                        },\r",
									"                        \"cardCovers\":{\r",
									"                            \"type\": \"boolean\"\r",
									"                        },                \r",
									"                        \"cardCounts\":{\r",
									"                            \"type\": \"boolean\"\r",
									"                        },                  \r",
									"                        \"isTemplate\":{\r",
									"                            \"type\": \"boolean\"\r",
									"                        },                   \r",
									"                        \"cardAging\":{\r",
									"                            \"type\": \"string\"\r",
									"                        },            \r",
									"                        \"calendarFeedEnabled\":{\r",
									"                            \"type\": \"boolean\"\r",
									"                        },\r",
									"                        \"hiddenPluginBoardButtons\":{\r",
									"                            \"type\": \"array\"\r",
									"                        },\r",
									"                        \"switcherViews\":{\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\":{\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\r",
									"                                    \"viewType\": {\"type\": \"string\"},\r",
									"                                    \"enabled\": {\"type\": \"boolean\"}\r",
									"                                },\r",
									"                                \"required\": [\"viewType\", \"enabled\"]\r",
									"                            }\r",
									"                        },\r",
									"                        \"background\": { \"type\": [\"string\"] },\r",
									"                    \"backgroundColor\": { \"type\": [\"string\"] },\r",
									"                    \"backgroundImage\": {\r",
									"                \"oneOf\": [\r",
									"                    { \"type\": \"string\" },\r",
									"                    { \"type\": \"null\" }\r",
									"                ]\r",
									"            },\r",
									"                    \"backgroundTile\": { \"type\": [\"boolean\"] },\r",
									"                    \"backgroundBrightness\": { \"type\": [\"string\"] },\r",
									"                    \"sharedSourceUrl\": {\r",
									"                \"oneOf\": [\r",
									"                    { \"type\": \"string\" },\r",
									"                    { \"type\": \"null\" }\r",
									"                ]\r",
									"            },\r",
									"                    \"backgroundImageScaled\": {\r",
									"                \"oneOf\": [\r",
									"                    { \"type\": \"string\" },\r",
									"                    { \"type\": \"null\" }\r",
									"                ]\r",
									"            },\r",
									"                    \"backgroundBottomColor\": { \"type\": [\"string\"] },\r",
									"                    \"backgroundTopColor\": { \"type\": [\"string\"] },\r",
									"                    \"canBePublic\": { \"type\": [\"boolean\"] },\r",
									"                    \"canBeEnterprise\": { \"type\": [\"boolean\"] },\r",
									"                    \"canBeOrg\": { \"type\": [\"boolean\"] },\r",
									"                    \"canBePrivate\": { \"type\": [\"boolean\"] },\r",
									"                    \"canInvite\": { \"type\": [\"boolean\"] }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"permissionLevel\",\r",
									"                    \"hideVotes\",\r",
									"                    \"voting\",\r",
									"                    \"comments\",\r",
									"                    \"invitations\",\r",
									"                    \"selfJoin\",\r",
									"                    \"cardCovers\",\r",
									"                    \"cardCounts\",\r",
									"                    \"isTemplate\",\r",
									"                    \"cardAging\",\r",
									"                    \"calendarFeedEnabled\",\r",
									"                    \"hiddenPluginBoardButtons\",\r",
									"                    \"switcherViews\",\r",
									"                    \"background\",\r",
									"                    \"backgroundColor\",\r",
									"                    \"backgroundTile\",\r",
									"                    \"backgroundBrightness\",\r",
									"                    \"backgroundBottomColor\",\r",
									"                    \"backgroundTopColor\",\r",
									"                    \"canBePublic\",\r",
									"                    \"canBeEnterprise\",\r",
									"                    \"canBeOrg\",\r",
									"                    \"canBePrivate\",\r",
									"                    \"canInvite\"\r",
									"                ]\r",
									"            },\r",
									"            \"labelNames\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"green\": { \"type\": [\"string\"] },\r",
									"                    \"yellow\": { \"type\": [\"string\"] },\r",
									"                    \"orange\": { \"type\": [\"string\"] },\r",
									"                    \"red\": { \"type\": [\"string\"] },\r",
									"                    \"purple\": { \"type\": [\"string\"] },\r",
									"                    \"blue\": { \"type\": [\"string\"] },\r",
									"                    \"sky\": { \"type\": [\"string\"] },\r",
									"                    \"lime\": { \"type\": [\"string\"] },\r",
									"                    \"pink\": { \"type\": [\"string\"] },\r",
									"                    \"black\": { \"type\": [\"string\"] },\r",
									"                    \"green_dark\": { \"type\": [\"string\"] },\r",
									"                    \"yellow_dark\": { \"type\": [\"string\"] },\r",
									"                    \"orange_dark\": { \"type\": [\"string\"] },\r",
									"                    \"red_dark\": { \"type\": [\"string\"] },\r",
									"                    \"purple_dark\": { \"type\": [\"string\"] },\r",
									"                    \"blue_dark\": { \"type\": [\"string\"] },\r",
									"                    \"sky_dark\": { \"type\": [\"string\"] },\r",
									"                    \"lime_dark\": { \"type\": [\"string\"] },\r",
									"                    \"pink_dark\": { \"type\": [\"string\"] },\r",
									"                    \"black_dark\": { \"type\": [\"string\"] },\r",
									"                    \"green_light\": { \"type\": [\"string\"] },\r",
									"                    \"yellow_light\": { \"type\": [\"string\"] },\r",
									"                    \"orange_light\": { \"type\": [\"string\"] },\r",
									"                    \"red_light\": { \"type\": [\"string\"] },\r",
									"                    \"purple_light\": { \"type\": [\"string\"] },\r",
									"                    \"blue_light\": { \"type\": [\"string\"] },\r",
									"                    \"sky_light\": { \"type\": [\"string\"] },\r",
									"                    \"lime_light\": { \"type\": [\"string\"] },\r",
									"                    \"pink_light\": { \"type\": [\"string\"] },\r",
									"                    \"black_light\": { \"type\": [\"string\"] }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"desc\",\r",
									"            \"descData\",\r",
									"            \"closed\",\r",
									"            \"idOrganization\",\r",
									"            \"url\",\r",
									"            \"shortUrl\",\r",
									"            \"prefs\",\r",
									"            \"labelNames\"\r",
									"        ]\r",
									"    };\r",
									"    \r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"    // pm.response.text(); kullanıldı sebebi: dönen yanıt başarısız olduğu için json formatında değil text-plain olarak verilmiş o yüzden JSON formatında çekemeyecek bunu. biz de çekebileceği tipte verdik.\r",
									"    pm.test(\"As expected, invalid id occurred,\", function () {\r",
									"        pm.expect(pm.response.text()).to.equal('invalid id')\r",
									"        });\r",
									"\r",
									"    //Headers kontrolü.\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"\r",
									"    //Geçici olarak atanan board_id değeri, environment:board_id'ye tekrar sıradaki isteklerde kullanabilmek için geri atandı.\r",
									"    pm.environment.set('board_id', pm.environment.get('temporary_variable_board_id'));\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[BOARD] Create a List on Board')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://api.trello.com/1/boards/:board_id?key={{key}}&token={{token}}&new_value=helloo",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								":board_id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "new_value",
									"value": "helloo"
								}
							],
							"variable": [
								{
									"key": "board_id",
									"value": "{{board_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://api.trello.com/1/boards/{id}?key=APIKey&token=APIToken' \\\r\n  --header 'Accept: application/json'"
					},
					"response": []
				},
				{
					"name": "[BOARD] Create a List on Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const neww = pm.require('@speeding-eclipse-222630/neww');\r",
									"let randomName = neww.generateRandomNameForBoard(length=10)\r",
									"\r",
									"pm.environment.set(\"list_name\", randomName)\r",
									"\r",
									"pm.environment.set(\"temporary_variable_list_name\", pm.environment.get(\"list_name\"))\r",
									"\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path - environment:list_name değişkeni değerine: '' atanır. Bunun sebebi başarısız istek atabilmek için boş gönderilmesi gerekiyor.\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set(\"list_name\", '')\r",
									"}\r",
									"\r",
									"//400: invalid value for name"
								],
								"type": "text/javascript",
								"packages": {
									"@speeding-eclipse-222630/neww": {
										"id": "0192ce4c-2ff9-73db-8a3b-e0d59696f140"
									}
								}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });  \r",
									"    \r",
									"    //Headers Kontrolü\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema Kontrolü\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"closed\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"color\":{\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"idBoard\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"pos\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"type\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"datasource\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\":{\r",
									"                        \"filter\":{\r",
									"                            \"type\": \"boolean\"\r",
									"                        }\r",
									"                    }},\r",
									"                \"limits\": {\r",
									"                    \"type\": \"object\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"id\",\r",
									"                \"name\",\r",
									"                \"closed\",\r",
									"                \"color\",\r",
									"                \"idBoard\",\r",
									"                \"pos\",\r",
									"                \"type\",\r",
									"                \"datasource\",\r",
									"                \"limits\"\r",
									"            ]\r",
									"        };\r",
									"\r",
									"        const Ajv = require(\"ajv\");\r",
									"        const ajv = new Ajv();\r",
									"\r",
									"        const validate = ajv.compile(schema);\r",
									"        const valid = validate(jsonData);\r",
									"\r",
									"        pm.expect(valid, validate.errors).to.be.true;\r",
									"        });\r",
									"}\r",
									"\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"    // pm.response.text(); kullanıldı sebebi: dönen yanıt başarısız olduğu için json formatında değil text-plain olarak verilmiş o yüzden JSON formatında çekemeyecek bunu. biz de çekebileceği tipte verdik.\r",
									"    pm.test(\"As expected, invalid value for name occurred,\", function () {\r",
									"        pm.expect(pm.response.text()).to.equal('invalid value for name')\r",
									"        });\r",
									"\r",
									"    //HEADERS CONTROL\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"\r",
									"    //Geçici olarak atanan board_id değeri, environment:list_name'ye tekrar sıradaki isteklerde kullanabilmek için geri atandı.\r",
									"    pm.environment.set(\"list_name\", pm.environment.get(\"temporary_variable_list_name\"))\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[BOARD] Get Lists on a Board')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://api.trello.com/1/boards/:board_id/lists?name={{list_name}}&key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								":board_id",
								"lists"
							],
							"query": [
								{
									"key": "name",
									"value": "{{list_name}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							],
							"variable": [
								{
									"key": "board_id",
									"value": "{{board_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request POST \\\r\n  --url 'https://api.trello.com/1/boards/{id}/lists?name={name}&key=APIKey&token=APIToken' \\\r\n  --header 'Accept: application/json'"
					},
					"response": []
				},
				{
					"name": "[BOARD] Get Lists on a Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path - board_id önceki istekten environmentta güncellenmiş olarak var olacak. Burada da bu isteği başarısız atabilmemiz için, \"board_id\"nin \"null\" değerine eşit olması lazım. En sonunda tüm testlerimiz bu istek için biteceği zaman, board_id'nin \"null\" değil en baştaki değeri alabilmesi için, değer ilk öcne geçici environment:temporary_variable_board_id değerine atanır, sonrasında Post-Response içerisinden tekrardan environment:temporary_variable_board_id içerisine atanır.\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set('temporary_variable_board_id', pm.environment.get('board_id'))\r",
									"    pm.environment.set(\"board_id\", null)\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });  \r",
									"    \r",
									"    //Headers Kontrolü\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema Kontrolü\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"closed\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"color\":{\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"idBoard\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"pos\": {\r",
									"                    \"type\": \"number\"\r",
									"                },\r",
									"                \"subscribed\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"boolean\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"softLimit\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"boolean\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"type\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"boolean\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"datasource\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"object\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"id\",\r",
									"                \"name\",\r",
									"                \"closed\",\r",
									"                \"color\",\r",
									"                \"idBoard\",\r",
									"                \"pos\",\r",
									"                \"subscribed\",\r",
									"                \"softLimit\",\r",
									"                \"type\",\r",
									"                \"datasource\"\r",
									"            ]\r",
									"            }\r",
									"        };\r",
									"\r",
									"        const Ajv = require(\"ajv\");\r",
									"        const ajv = new Ajv();\r",
									"\r",
									"        const validate = ajv.compile(schema);\r",
									"        const valid = validate(jsonData);\r",
									"\r",
									"        pm.expect(valid, validate.errors).to.be.true;\r",
									"        });\r",
									"}\r",
									"\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"    \r",
									"    // pm.response.text(); kullanıldı sebebi: dönen yanıt başarısız olduğu için json formatında değil text-plain olarak verilmiş o yüzden JSON formatında çekemeyecek bunu. biz de çekebileceği tipte verdik.\r",
									"    pm.test(\"As expected, invalid id appeared,\", function () {\r",
									"        pm.expect(pm.response.text()).to.equal('invalid id')\r",
									"        });\r",
									"\r",
									"    //Headers Kontrolü\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"\r",
									"    //Geçici olarak atanan board_id değeri, environment:board_id'ye tekrar sıradaki isteklerde kullanabilmek için geri atandı.\r",
									"    pm.environment.set('board_id', pm.environment.get('temporary_variable_board_id'));\r",
									"}\r",
									"\r",
									"// invalid id 400\r",
									"pm.execution.setNextRequest('[BOARD] Create a Label on a Board')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://api.trello.com/1/boards/:board_id/lists?key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								":board_id",
								"lists"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							],
							"variable": [
								{
									"key": "board_id",
									"value": "{{board_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://api.trello.com/1/boards/{id}/lists?key=APIKey&token=APIToken' \\\r\n  --header 'Accept: application/json'"
					},
					"response": []
				},
				{
					"name": "[BOARD] Create a Label on a Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    //Headers Kontrolü\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema Kontrolü\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"idBoard\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"color\":{\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"uses\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"limits\": {\r",
									"                    \"type\": \"object\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"id\",\r",
									"                \"idBoard\",\r",
									"                \"name\",\r",
									"                \"color\",\r",
									"                \"uses\",\r",
									"                \"limits\"\r",
									"            ]\r",
									"        };\r",
									"\r",
									"        const Ajv = require(\"ajv\");\r",
									"        const ajv = new Ajv();\r",
									"\r",
									"        const validate = ajv.compile(schema);\r",
									"        const valid = validate(jsonData);\r",
									"\r",
									"        pm.expect(valid, validate.errors).to.be.true;\r",
									"        });\r",
									"}\r",
									"\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"        // Status Code kontrolü yapılır. 400 beklenir. Burada aslında pm.response.to.have kısmı, sendRequest ile atılan isteği değil, normal atılan Postman İsteğinin sonucunu kontrol eder.\r",
									"        pm.test(\"Status code is 400\", function () {\r",
									"            pm.response.to.have.status(400);\r",
									"            });\r",
									"        \r",
									"        const jsonData = pm.response.json();\r",
									"\r",
									"        // JSON Body kontrolü yapılır.\r",
									"        pm.test(\"As expected, invalid value for color occurred,\", function () {\r",
									"            pm.expect(jsonData.message).to.equal('invalid value for color')\r",
									"            pm.expect(jsonData.error).to.equal('ERROR')\r",
									"            });\r",
									"            \r",
									"        //Headers Controlü yapılır.\r",
									"        pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"            {\r",
									"            pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"            });\r",
									"\r",
									"    //Geçici olarak atanan board_id değeri, environment:list_name'ye tekrar sıradaki isteklerde kullanabilmek için geri atandı.\r",
									"    pm.environment.set(\"color_name\", pm.environment.get(\"temporary_variable_color_name\"))\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[BOARD]Get Labels on a Board')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// oluşturulacak label için renk ismi verilir.\r",
									"pm.environment.set(\"color_name\", \"blue\")\r",
									"\r",
									"pm.environment.set(\"temporary_variable_color_name\", pm.environment.get(\"color_name\"))\r",
									"\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path - environment:list_name değişkeni değerine: '' atanır. Bunun sebebi başarısız istek atabilmek için boş gönderilmesi gerekiyor.\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set(\"color_name\", 1212)\r",
									"}\r",
									"\r",
									"//400: invalid value for name\r",
									"\r",
									"\r",
									"\r",
									"//color: 1212 400: {\r",
									"//    \"message\": \"invalid value for color\",\r",
									"//    \"error\": \"ERROR\"\r",
									"//}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/:board_id/labels?name=Practicing Label&color={{color_name}}&key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								":board_id",
								"labels"
							],
							"query": [
								{
									"key": "name",
									"value": "Practicing Label"
								},
								{
									"key": "color",
									"value": "{{color_name}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							],
							"variable": [
								{
									"key": "board_id",
									"value": "{{board_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request POST \\\r\n  --url 'https://api.trello.com/1/boards/{id}/labels?name={name}&color={color}&key=APIKey&token=APIToken'"
					},
					"response": []
				},
				{
					"name": "[BOARD]Get Labels on a Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path - board_id önceki istekten environmentta güncellenmiş olarak var olacak. Burada da bu isteği başarısız atabilmemiz için, \"board_id\"nin \"null\" değerine eşit olması lazım. En sonunda tüm testlerimiz bu istek için biteceği zaman, board_id'nin \"null\" değil en baştaki değeri alabilmesi için, değer ilk öcne geçici environment:temporary_variable_board_id değerine atanır, sonrasında Post-Response içerisinden tekrardan environment:temporary_variable_board_id içerisine atanır.\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set('temporary_variable_board_id', pm.environment.get('board_id'))\r",
									"    pm.environment.set(\"board_id\", null)\r",
									"}\r",
									"\r",
									"//400: invalid"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    //Headers Kontrolü\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema Kontrolü\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"array\",\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"idBoard\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"color\":{\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"uses\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"id\",\r",
									"                \"idBoard\",\r",
									"                \"name\",\r",
									"                \"color\",\r",
									"                \"uses\"\r",
									"            ]\r",
									"        };\r",
									"\r",
									"        const Ajv = require(\"ajv\");\r",
									"        const ajv = new Ajv();\r",
									"\r",
									"        const validate = ajv.compile(schema);\r",
									"        const valid = validate(jsonData);\r",
									"\r",
									"        pm.expect(valid, validate.errors).to.be.true;\r",
									"        });\r",
									"}\r",
									"\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"        // Status Code kontrolü yapılır. 400 beklenir. Burada aslında pm.response.to.have kısmı, sendRequest ile atılan isteği değil, normal atılan Postman İsteğinin sonucunu kontrol eder.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"    \r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, invalid id,\", function () {\r",
									"        pm.expect(pm.response.text()).to.equal('invalid id')\r",
									"        });\r",
									"        \r",
									"    //Headers Controlü yapılır.\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"\r",
									"    //Geçici olarak atanan board_id değeri, environment:list_name'ye tekrar sıradaki isteklerde kullanabilmek için geri atandı.\r",
									"    pm.environment.set(\"color_name\", pm.environment.get(\"temporary_variable_color_name\"))\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[BOARD] Invite Member to Board via email')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/:board_id/labels?key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								":board_id",
								"labels"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							],
							"variable": [
								{
									"key": "board_id",
									"value": "{{board_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://api.trello.com/1/boards/{id}/labels?key=APIKey&token=APIToken'"
					},
					"response": []
				},
				{
					"name": "[BOARD] Invite Member to Board via email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"        pm.environment.set(\"board_id\", pm.environment.get('board_id'))\r",
									"        pm.environment.set(\"full_name_member\", \"Test Practice\")\r",
									"\r",
									"}\r",
									"\r",
									"//sad path - \r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set(\"board_id\", pm.environment.get('board_id'))\r",
									"    pm.environment.set(\"full_name_member\", 1212)\r",
									"}\r",
									"\r",
									"//400: invalid\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    //Headers Kontrolü\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema Kontrolü\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"members\": {\r",
									"                    \"type\": \"array\",\r",
									"                    \"items\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\r",
									"                                    \"id\": {\"type\": \"string\"},\r",
									"                                    \"activityBlocked\": {\"type\": \"boolean\"},\r",
									"                                    \"avatarHash\": {\r",
									"                                            \"oneOf\": [\r",
									"                                                {\"type\": \"string\"},\r",
									"                                                {\"type\": \"null\"},\r",
									"                                            ]\r",
									"                                        },\r",
									"                                    \"avatarUrl\": {\r",
									"                                            \"oneOf\": [\r",
									"                                                {\"type\": \"string\"},\r",
									"                                                {\"type\": \"null\"},\r",
									"                                            ]\r",
									"                                        },\r",
									"                                    \"fullName\": {\"type\": \"string\"},\r",
									"                                    \"idMemberReferrer\": {\r",
									"                                        \"oneOf\": [\r",
									"                                            {\"type\": \"string\"},\r",
									"                                            {\"type\": \"null\"},\r",
									"                                        ]\r",
									"                                    },\r",
									"                                    \"initials\": {\"type\": \"string\"},\r",
									"                                    \"nonPublic\": {\"type\": \"object\"},\r",
									"                                    \"nonPublicAvailable\": {\"type\": \"boolean\"},\r",
									"                                    \"username\": {\"type\": \"string\"},\r",
									"                                    \"confirmed\": {\"type\": \"boolean\"},\r",
									"                                    \"memberType\": {\"type\": \"string\"}\r",
									"                                },\r",
									"                                \"required\": [\r",
									"                                \"id\",\r",
									"                                \"activityBlocked\",\r",
									"                                \"avatarHash\",\r",
									"                                \"avatarUrl\",\r",
									"                                \"fullName\",\r",
									"                                \"idMemberReferrer\",\r",
									"                                \"initials\",\r",
									"                                \"nonPublic\",\r",
									"                                \"nonPublicAvailable\",\r",
									"                                \"username\",\r",
									"                                \"confirmed\",\r",
									"                                \"memberType\"]\r",
									"                            }\r",
									"                },\r",
									"                \"memberships\": {\r",
									"                    \"type\": \"array\",\r",
									"                    \"items\": {\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\r",
									"                                    \"id\": {\r",
									"                                            \"oneOf\": [\r",
									"                                                {\"type\": \"string\"},\r",
									"                                                {\"type\": \"null\"},\r",
									"                                            ]\r",
									"                                        },\r",
									"                                    \"idMember\": {\r",
									"                                            \"oneOf\": [\r",
									"                                                {\"type\": \"string\"},\r",
									"                                                {\"type\": \"null\"},\r",
									"                                            ]\r",
									"                                        },\r",
									"                                    \"memberType\": {\r",
									"                                            \"oneOf\": [\r",
									"                                                {\"type\": \"string\"},\r",
									"                                                {\"type\": \"null\"},\r",
									"                                            ]\r",
									"                                        },\r",
									"                                    \"unconfirmed\": {\r",
									"                                            \"oneOf\": [\r",
									"                                                {\"type\": \"boolean\"},\r",
									"                                                {\"type\": \"null\"},\r",
									"                                            ]\r",
									"                                        },\r",
									"                                    \"deactivated\": {\r",
									"                                            \"oneOf\": [\r",
									"                                                {\"type\": \"boolean\"},\r",
									"                                                {\"type\": \"null\"},\r",
									"                                            ]\r",
									"                                        },\r",
									"                                    \"orgMemberType\": {\r",
									"                                            \"oneOf\": [\r",
									"                                                {\"type\": \"string\"},\r",
									"                                                {\"type\": \"null\"},\r",
									"                                            ]\r",
									"                                        },\r",
									"                                    \r",
									"                                },\r",
									"                                \"required\": [\r",
									"                                \"id\", \r",
									"                                \"idMember\", \r",
									"                                \"memberType\", \r",
									"                                \"unconfirmed\", \r",
									"                                \"deactivated\", \r",
									"                                \"orgMemberType\"\r",
									"                                ]\r",
									"                            }\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"id\",\r",
									"                \"members\",\r",
									"                \"memberships\"\r",
									"            ]\r",
									"        };\r",
									"\r",
									"        const Ajv = require(\"ajv\");\r",
									"        const ajv = new Ajv();\r",
									"\r",
									"        const validate = ajv.compile(schema);\r",
									"        const valid = validate(jsonData);\r",
									"\r",
									"        pm.expect(valid, validate.errors).to.be.true;\r",
									"        });\r",
									"}\r",
									"\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"        // Status Code kontrolü yapılır. 400 beklenir. Burada aslında pm.response.to.have kısmı, sendRequest ile atılan isteği değil, normal atılan Postman İsteğinin sonucunu kontrol eder.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, invalid email address occurred,\", function () {\r",
									"        pm.expect(jsonData.message).to.equal('invalid email address')\r",
									"        pm.expect(jsonData.error).to.equal('ERROR')\r",
									"        });\r",
									"            \r",
									"        \r",
									"    //Headers Controlü yapılır.\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"        });\r",
									"\r",
									"    //Geçici olarak atanan board_id değeri, environment:list_name'ye tekrar sıradaki isteklerde kullanabilmek için geri atandı.\r",
									"    pm.environment.set(\"color_name\", pm.environment.get(\"temporary_variable_color_name\"))\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[BOARD] Update a Board')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Test Practice Name\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.trello.com/1/boards/:board_id/members?email={{email_string}}&key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								":board_id",
								"members"
							],
							"query": [
								{
									"key": "email",
									"value": "{{email_string}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							],
							"variable": [
								{
									"key": "board_id",
									"value": "{{board_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request PUT \\\r\n  --url 'https://api.trello.com/1/boards/{id}/members?email={email}&key=APIKey&token=APIToken' \\\r\n  --header 'Content-Type: application/json' \\\r\n  --data '{\r\n  \"fullName\": \"<string>\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "[BOARD] Update a Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    \r",
									"    //Headers Controlü yapılır\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"desc\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"descData\":{\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"object\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"closed\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"idOrganization\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"idEnterprise\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"pinned\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"url\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"shortUrl\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"prefs\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\":{\r",
									"                        \"permissionLevel\":{\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"hideVotes\":{\r",
									"                            \"type\": \"boolean\"\r",
									"                        }, \r",
									"                        \"voting\":{\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"comments\":{\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"invitations\":{\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"selfJoin\":{\r",
									"                            \"type\": \"boolean\"\r",
									"                        },\r",
									"                        \"cardCovers\":{\r",
									"                            \"type\": \"boolean\"\r",
									"                        },                \r",
									"                        \"cardCounts\":{\r",
									"                            \"type\": \"boolean\"\r",
									"                        },                  \r",
									"                        \"isTemplate\":{\r",
									"                            \"type\": \"boolean\"\r",
									"                        },                   \r",
									"                        \"cardAging\":{\r",
									"                            \"type\": \"string\"\r",
									"                        },            \r",
									"                        \"calendarFeedEnabled\":{\r",
									"                            \"type\": \"boolean\"\r",
									"                        },\r",
									"                        \"hiddenPluginBoardButtons\":{\r",
									"                            \"type\": \"array\"\r",
									"                        },\r",
									"                        \"switcherViews\":{\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\":{\r",
									"                                \"type\": \"object\",\r",
									"                                \"properties\": {\r",
									"                                    \"viewType\": {\"type\": \"string\"},\r",
									"                                    \"enabled\": {\"type\": \"boolean\"}\r",
									"                                },\r",
									"                                \"required\": [\"viewType\", \"enabled\"]\r",
									"                            }\r",
									"                        },\r",
									"                        \"background\": { \"type\": [\"string\"] },\r",
									"                        \"backgroundColor\": { \"type\": [\"string\"] },\r",
									"                        \"backgroundImage\": {\r",
									"                                \"oneOf\": [\r",
									"                                    { \"type\": \"string\" },\r",
									"                                    { \"type\": \"null\" }\r",
									"                                ]\r",
									"                            },\r",
									"                        \"backgroundTile\": { \"type\": [\"boolean\"] },\r",
									"                        \"backgroundBrightness\": { \"type\": [\"string\"] },\r",
									"                        \"sharedSourceUrl\": {\r",
									"                            \"oneOf\": [\r",
									"                                    { \"type\": \"string\" },\r",
									"                                    { \"type\": \"null\" }\r",
									"                                ]\r",
									"                            },\r",
									"                        \"backgroundImageScaled\": {\r",
									"                            \"oneOf\": [\r",
									"                                    { \"type\": \"string\" },\r",
									"                                    { \"type\": \"null\" }\r",
									"                                ]\r",
									"                            },\r",
									"                        \"backgroundBottomColor\": { \"type\": [\"string\"] },\r",
									"                        \"backgroundTopColor\": { \"type\": [\"string\"] },\r",
									"                        \"canBePublic\": { \"type\": [\"boolean\"] },\r",
									"                        \"canBeEnterprise\": { \"type\": [\"boolean\"] },\r",
									"                        \"canBeOrg\": { \"type\": [\"boolean\"] },\r",
									"                        \"canBePrivate\": { \"type\": [\"boolean\"] },\r",
									"                        \"canInvite\": { \"type\": [\"boolean\"] }\r",
									"                        },\r",
									"                        \"required\": [\r",
									"                            \"permissionLevel\",\r",
									"                            \"hideVotes\",\r",
									"                            \"voting\",\r",
									"                            \"comments\",\r",
									"                            \"invitations\",\r",
									"                            \"selfJoin\",\r",
									"                            \"cardCovers\",\r",
									"                            \"cardCounts\",\r",
									"                            \"isTemplate\",\r",
									"                            \"cardAging\",\r",
									"                            \"calendarFeedEnabled\",\r",
									"                            \"hiddenPluginBoardButtons\",\r",
									"                            \"switcherViews\",\r",
									"                            \"background\",\r",
									"                            \"backgroundColor\",\r",
									"                            \"backgroundTile\",\r",
									"                            \"backgroundBrightness\",\r",
									"                            \"backgroundBottomColor\",\r",
									"                            \"backgroundTopColor\",\r",
									"                            \"canBePublic\",\r",
									"                            \"canBeEnterprise\",\r",
									"                            \"canBeOrg\",\r",
									"                            \"canBePrivate\",\r",
									"                            \"canInvite\"\r",
									"                        ]\r",
									"            },\r",
									"            \"labelNames\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"green\": { \"type\": [\"string\"] },\r",
									"                    \"yellow\": { \"type\": [\"string\"] },\r",
									"                    \"orange\": { \"type\": [\"string\"] },\r",
									"                    \"red\": { \"type\": [\"string\"] },\r",
									"                    \"purple\": { \"type\": [\"string\"] },\r",
									"                    \"blue\": { \"type\": [\"string\"] },\r",
									"                    \"sky\": { \"type\": [\"string\"] },\r",
									"                    \"lime\": { \"type\": [\"string\"] },\r",
									"                    \"pink\": { \"type\": [\"string\"] },\r",
									"                    \"black\": { \"type\": [\"string\"] },\r",
									"                    \"green_dark\": { \"type\": [\"string\"] },\r",
									"                    \"yellow_dark\": { \"type\": [\"string\"] },\r",
									"                    \"orange_dark\": { \"type\": [\"string\"] },\r",
									"                    \"red_dark\": { \"type\": [\"string\"] },\r",
									"                    \"purple_dark\": { \"type\": [\"string\"] },\r",
									"                    \"blue_dark\": { \"type\": [\"string\"] },\r",
									"                    \"sky_dark\": { \"type\": [\"string\"] },\r",
									"                    \"lime_dark\": { \"type\": [\"string\"] },\r",
									"                    \"pink_dark\": { \"type\": [\"string\"] },\r",
									"                    \"black_dark\": { \"type\": [\"string\"] },\r",
									"                    \"green_light\": { \"type\": [\"string\"] },\r",
									"                    \"yellow_light\": { \"type\": [\"string\"] },\r",
									"                    \"orange_light\": { \"type\": [\"string\"] },\r",
									"                    \"red_light\": { \"type\": [\"string\"] },\r",
									"                    \"purple_light\": { \"type\": [\"string\"] },\r",
									"                    \"blue_light\": { \"type\": [\"string\"] },\r",
									"                    \"sky_light\": { \"type\": [\"string\"] },\r",
									"                    \"lime_light\": { \"type\": [\"string\"] },\r",
									"                    \"pink_light\": { \"type\": [\"string\"] },\r",
									"                    \"black_light\": { \"type\": [\"string\"] }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"desc\",\r",
									"            \"descData\",\r",
									"            \"closed\",\r",
									"            \"idOrganization\",\r",
									"            \"url\",\r",
									"            \"shortUrl\",\r",
									"            \"prefs\",\r",
									"            \"labelNames\"\r",
									"        ]\r",
									"    };\r",
									"    \r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, invalid value for name occurred,\", function () {\r",
									"        pm.expect(jsonData.message).to.equal('invalid value for name')\r",
									"        pm.expect(jsonData.error).to.equal('ERROR')\r",
									"        });\r",
									"\r",
									"    //Headers kontrolü.\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"        });\r",
									"\r",
									"    //Geçici olarak atanan board_id değeri, environment:board_id'ye tekrar sıradaki isteklerde kullanabilmek için geri atandı.\r",
									"    pm.environment.set('board_id', pm.environment.get('temporary_variable_board_id'));\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[BOARD] Get a Specific Field from Board')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const neww = pm.require('@speeding-eclipse-222630/neww');\r",
									"//happy path\r",
									"\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"        pm.environment.set(\"board_id\", pm.environment.get('board_id'))\r",
									"\r",
									"        let randomNameUpdate = neww.generateRandomNameForBoard(length=8)\r",
									"        pm.collectionVariables.set(\"update_name\", randomNameUpdate)\r",
									"}\r",
									"\r",
									"//sad path - \r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set(\"board_id\", pm.environment.get('board_id'))\r",
									"    pm.collectionVariables.set(\"update_name\", \"\")\r",
									"} \r",
									"\r",
									"let randomDescUpdate = neww.generateRandomNameForBoard(length=8)\r",
									"pm.collectionVariables.set(\"update_desc\", randomDescUpdate)"
								],
								"type": "text/javascript",
								"packages": {
									"@speeding-eclipse-222630/neww": {
										"id": "0192ce4c-2ff9-73db-8a3b-e0d59696f140"
									}
								}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{update_name}}\",\r\n    \"desc\": \"{{update_desc}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.trello.com/1/boards/:board_id?token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								":board_id"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								}
							],
							"variable": [
								{
									"key": "board_id",
									"value": "{{board_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request PUT \\\r\n  --url 'https://api.trello.com/1/boards/{id}?key=APIKey&token=APIToken'"
					},
					"response": []
				},
				{
					"name": "[BOARD] Get a Specific Field from Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path - \r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    \r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    \r",
									"    //Headers Controlü yapılır\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"_value\": {\r",
									"                    \"type\": \"string\"\r",
									"                }},\r",
									"        \"required\": [\r",
									"            \"_value\"\r",
									"        ]\r",
									"    };\r",
									"    \r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 404 Not Found\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"        });\r",
									"\r",
									"\r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, Cannot GET occurred,\", function () {\r",
									"        pm.expect(pm.response.text()).to.include('Cannot GET')\r",
									"        });\r",
									"\r",
									"    //Headers kontrolü.\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[BOARD] Get the Members of a Board')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/:board_id/:field?key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								":board_id",
								":field"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							],
							"variable": [
								{
									"key": "board_id",
									"value": "{{board_id}}"
								},
								{
									"key": "field",
									"value": "{{field_name}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://api.trello.com/1/boards/{id}/{field}?key=APIKey&token=APIToken'"
					},
					"response": []
				},
				{
					"name": "[BOARD] Get the Members of a Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path - board_id önceki istekten environmentta güncellenmiş olarak var olacak. Burada da bu isteği başarısız atabilmemiz için, \"board_id\"nin \"null\" değerine eşit olması lazım. En sonunda tüm testlerimiz bu istek için biteceği zaman, board_id'nin \"null\" değil en baştaki değeri alabilmesi için, değer ilk öcne geçici environment:temporary_variable_board_id değerine atanır, sonrasında Post-Response içerisinden tekrardan environment:temporary_variable_board_id içerisine atanır.\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set('temporary_variable_board_id', pm.environment.get('board_id'))\r",
									"    pm.environment.set(\"board_id\", null)\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    \r",
									"    //Headers Controlü yapılır\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"fullName\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"username\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                    },\r",
									"                    \"required\": [\r",
									"                        \"id\",\r",
									"                        \"fullName\",\r",
									"                        \"username\"\r",
									"                    ]\r",
									"                }\r",
									"    };\r",
									"    \r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400 Not Found\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"\r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, invalid id occurred,\", function () {\r",
									"        pm.expect(pm.response.text()).to.include('invalid id')\r",
									"        });\r",
									"\r",
									"    //Headers kontrolü.\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[LIST] Create a New List')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/:board_id/members?key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								":board_id",
								"members"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							],
							"variable": [
								{
									"key": "board_id",
									"value": "{{board_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://api.trello.com/1/boards/{id}/members?key=APIKey&token=APIToken'"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"console.log('ÖNCELİKLE ÇALIŞAN POST RESPONSE: KLASÖR')"
						]
					}
				}
			]
		},
		{
			"name": "List Requests",
			"item": [
				{
					"name": "[LIST] Create a New List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path - \r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set('temporary_variable_list_name', pm.environment.get('list_name'))\r",
									"    pm.environment.set(\"list_name\", \"\")\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    \r",
									"    //Headers Controlü yapılır\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"closed\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"color\":{\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"idBoard\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"pos\": {\r",
									"                    \"type\": \"number\"\r",
									"                },\r",
									"                \"type\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"datasource\": {\r",
									"                    \"type\": \"object\"\r",
									"                },\r",
									"                \"limits\": {\r",
									"                    \"type\": \"object\"\r",
									"                }},\r",
									"        \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"closed\",\r",
									"            \"color\",\r",
									"            \"idBoard\",\r",
									"            \"pos\",\r",
									"            \"type\",\r",
									"            \"datasource\",\r",
									"            \"limits\"\r",
									"        ]\r",
									"    };\r",
									"    \r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"\r",
									"    pm.environment.set('list_id', jsonData.id)\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, invalid value for name occurred,\", function () {\r",
									"        pm.expect(pm.response.text()).to.equal('invalid value for name')\r",
									"        });\r",
									"\r",
									"    //Headers kontrolü.\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"    \r",
									"    pm.environment.set(\"list_name\", pm.environment.get('temporary_variable_list_name'))\r",
									"\r",
									"    let randomNameForListSendRequest = \"Random List Name\";\r",
									"    let token = pm.collectionVariables.get('token');\r",
									"    let key = pm.collectionVariables.get('key');\r",
									"    let board_id_data = pm.environment.get('board_id');\r",
									"\r",
									"    let url = `https://api.trello.com/1/lists?name=${randomNameForListSendRequest}&idBoard=${board_id_data}&token=${token}&key=${key}`;\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: url,\r",
									"        method: \"POST\"\r",
									"    }, function (err, response) {\r",
									"        if (err) {\r",
									"            console.log('Hata:', err);\r",
									"            return;\r",
									"        }\r",
									"        const jsonData = response.json();\r",
									"        pm.environment.set('list_id', jsonData.id)\r",
									"        pm.environment.set('list_name', jsonData.name)\r",
									"        });\r",
									"\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[LIST] Get a List')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/lists?name={{list_name}}&idBoard={{board_id}}&key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"lists"
							],
							"query": [
								{
									"key": "name",
									"value": "{{list_name}}"
								},
								{
									"key": "idBoard",
									"value": "{{board_id}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request POST \\\r\n  --url 'https://api.trello.com/1/lists?name={name}&idBoard=5abbe4b7ddc1b351ef961414&key=APIKey&token=APIToken'"
					},
					"response": []
				},
				{
					"name": "[LIST] Get a List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path -\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set('temporary_variable_list_id', pm.environment.get('list_id'))\r",
									"    pm.environment.set(\"list_id\", null)\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    \r",
									"    //Headers Controlü yapılır\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"closed\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"color\":{\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"idBoard\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"pos\": {\r",
									"                    \"type\": \"number\"\r",
									"                },\r",
									"                \"type\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"datasource\": {\r",
									"                    \"type\": \"object\"\r",
									"                }},\r",
									"        \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"closed\",\r",
									"            \"color\",\r",
									"            \"idBoard\",\r",
									"            \"pos\",\r",
									"            \"type\",\r",
									"            \"datasource\"\r",
									"        ]\r",
									"    };\r",
									"    \r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"\r",
									"    pm.environment.set('list_id', jsonData.id)\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, invalid id occurred,\", function () {\r",
									"        pm.expect(pm.response.text()).to.equal('invalid id')\r",
									"        });\r",
									"\r",
									"    //Headers kontrolü.\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"\r",
									"    pm.environment.set('list_id', pm.environment.get('temporary_variable_list_id'));\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[LIST] Update a List')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/lists/:list_id?key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"lists",
								":list_id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							],
							"variable": [
								{
									"key": "list_id",
									"value": "{{list_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://api.trello.com/1/lists/{id}?key=APIKey&token=APIToken'"
					},
					"response": []
				},
				{
					"name": "[LIST] Update a List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path -\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set('temporary_variable_list_name', pm.environment.get('list_name'))\r",
									"    pm.environment.set(\"list_name\", \"\")\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    \r",
									"    //Headers Controlü yapılır\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"closed\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"color\":{\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"idBoard\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"pos\": {\r",
									"                    \"type\": \"number\"\r",
									"                }},\r",
									"        \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"closed\",\r",
									"            \"color\",\r",
									"            \"idBoard\",\r",
									"            \"pos\"\r",
									"        ]\r",
									"    };\r",
									"    \r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"\r",
									"    pm.environment.set('list_id', jsonData.id)\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    //Geçici olarak atanan board_id değeri, environment:board_id'ye tekrar sıradaki isteklerde kullanabilmek için geri atandı.\r",
									"    pm.environment.set('list_name', pm.environment.get('temporary_variable_list_name'));\r",
									"\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, invalid value for name occurred,\", function () {\r",
									"        pm.expect(pm.response.text()).to.equal('invalid value for name')\r",
									"        });\r",
									"\r",
									"    //Headers kontrolü.\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[CARD] Create a new Card')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/lists/:list_id?key={{key}}&token={{token}}&name={{list_name}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"lists",
								":list_id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "name",
									"value": "{{list_name}}"
								}
							],
							"variable": [
								{
									"key": "list_id",
									"value": "{{list_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request PUT \\\r\n  --url 'https://api.trello.com/1/lists/{id}?key=APIKey&token=APIToken'"
					},
					"response": []
				}
			]
		},
		{
			"name": "Card Requests",
			"item": [
				{
					"name": "[CARD] Create a new Card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path -\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set('temporary_variable_list_id', pm.environment.get('list_id'))\r",
									"    pm.environment.set(\"list_id\", \"\")\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    \r",
									"    //Headers Controlü yapılır\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"badges\": {\r",
									"                    \"type\": \"object\"\r",
									"                },\r",
									"                \"checkItemStates\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"closed\":{\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"boolean\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"dueComplete\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"dateLastActivity\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"desc\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"descData\": {\r",
									"                    \"type\": \"object\"\r",
									"                },\r",
									"                \"due\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"dueReminder\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"email\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"idBoard\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"idChecklists\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"idList\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"idMembers\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"idMembersVoted\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"idShort\": {\r",
									"                    \"type\": \"number\"\r",
									"                },\r",
									"                \"idAttachmentCover\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"labels\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"idLabels\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"manualCoverAttachment\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"pinned\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"pos\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"number\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"shortLink\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"shortUrl\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"start\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"subscribed\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"url\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"cover\": {\r",
									"                    \"type\": \"object\"\r",
									"                },\r",
									"                \"isTemplate\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"cardRole\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"attachments\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"stickers\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"limits\": {\r",
									"                    \"type\": \"object\"\r",
									"                }               \r",
									"                },\r",
									"            \"required\": [\r",
									"                \"id\",\r",
									"                \"badges\",\r",
									"                \"checkItemStates\",\r",
									"                \"closed\",\r",
									"                \"dueComplete\",\r",
									"                \"dateLastActivity\",\r",
									"                \"desc\",\r",
									"                \"descData\",\r",
									"                \"due\",\r",
									"                \"dueReminder\",\r",
									"                \"email\",\r",
									"                \"idBoard\",\r",
									"                \"idChecklists\",\r",
									"                \"idList\",\r",
									"                \"idMembers\",\r",
									"                \"idMembersVoted\",\r",
									"                \"idShort\",\r",
									"                \"idAttachmentCover\",\r",
									"                \"labels\",\r",
									"                \"idLabels\",\r",
									"                \"manualCoverAttachment\",\r",
									"                \"name\",\r",
									"                \"pinned\",\r",
									"                \"pos\",\r",
									"                \"shortLink\",\r",
									"                \"shortUrl\",\r",
									"                \"start\",\r",
									"                \"subscribed\",\r",
									"                \"url\",\r",
									"                \"cover\",\r",
									"                \"isTemplate\",\r",
									"                \"cardRole\",\r",
									"                \"attachments\",\r",
									"                \"stickers\",\r",
									"                \"limits\"        \r",
									"            ]\r",
									"    };\r",
									"    \r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"\r",
									"    pm.environment.set('card_id', jsonData.id)\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, invalid value for idList occurred,\", function () {\r",
									"        pm.expect(pm.response.text()).to.equal('invalid value for idList')\r",
									"        });\r",
									"\r",
									"    //Headers kontrolü.\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"\r",
									"    pm.environment.set('list_id', pm.environment.get('temporary_variable_list_id'));\r",
									"\r",
									"    let randomNameForCardSendRequest = \"Random List Name\";\r",
									"    let randomDescForCardSendRequest = \"Hello Desc\";\r",
									"    let idListForCardSendRequest = pm.environment.get('temporary_variable_list_id');\r",
									"    let token = pm.collectionVariables.get('token');\r",
									"    let key = pm.collectionVariables.get('key');\r",
									"\r",
									"    let url = `https://api.trello.com/1/cards?name=${randomNameForCardSendRequest}&desc=${randomDescForCardSendRequest}&idList=${idListForCardSendRequest}&token=${token}&key=${key}`;\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: url,\r",
									"        method: \"POST\"\r",
									"    }, function (err, response) {\r",
									"        if (err) {\r",
									"            console.log('Hata:', err);\r",
									"            return;\r",
									"        }\r",
									"        const jsonData = response.json();\r",
									"        pm.environment.set('card_id', jsonData.id)\r",
									"        });\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[LIST] Get Cards in a List')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"A new card for new List-2\",\r\n    \"desc\": \"This is the description for the card.-2\",\r\n    \"idList\": \"{{list_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.trello.com/1/cards?key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"cards"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request POST \\\r\n  --url 'https://api.trello.com/1/cards?idList=5abbe4b7ddc1b351ef961414&key=APIKey&token=APIToken' \\\r\n  --header 'Accept: application/json'"
					},
					"response": []
				},
				{
					"name": "[LIST] Get Cards in a List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path -\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set('temporary_variable_list_id', pm.environment.get('list_id'))\r",
									"    pm.environment.set(\"list_id\", \"\")\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    \r",
									"    //Headers Controlü yapılır\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"array\",\r",
									"            \"items\":{\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"badges\": {\r",
									"                    \"type\": \"object\"\r",
									"                },\r",
									"                \"checkItemStates\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"closed\":{\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"boolean\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"dueComplete\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"dateLastActivity\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"desc\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"descData\": {\r",
									"                    \"type\": \"object\"\r",
									"                },\r",
									"                \"due\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"dueReminder\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"email\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"idBoard\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"idChecklists\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"idList\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"idMembers\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"idMembersVoted\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"idShort\": {\r",
									"                    \"type\": \"number\"\r",
									"                },\r",
									"                \"idAttachmentCover\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"labels\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"idLabels\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"manualCoverAttachment\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"pinned\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"pos\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"number\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"shortLink\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"shortUrl\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"start\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"subscribed\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"url\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"cover\": {\r",
									"                    \"type\": \"object\"\r",
									"                },\r",
									"                \"isTemplate\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"cardRole\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                }       \r",
									"                },\r",
									"            \"required\": [\r",
									"                \"id\",\r",
									"                \"badges\",\r",
									"                \"checkItemStates\",\r",
									"                \"closed\",\r",
									"                \"dueComplete\",\r",
									"                \"dateLastActivity\",\r",
									"                \"desc\",\r",
									"                \"descData\",\r",
									"                \"due\",\r",
									"                \"dueReminder\",\r",
									"                \"email\",\r",
									"                \"idBoard\",\r",
									"                \"idChecklists\",\r",
									"                \"idList\",\r",
									"                \"idMembers\",\r",
									"                \"idMembersVoted\",\r",
									"                \"idShort\",\r",
									"                \"idAttachmentCover\",\r",
									"                \"labels\",\r",
									"                \"idLabels\",\r",
									"                \"manualCoverAttachment\",\r",
									"                \"name\",\r",
									"                \"pinned\",\r",
									"                \"pos\",\r",
									"                \"shortLink\",\r",
									"                \"shortUrl\",\r",
									"                \"start\",\r",
									"                \"subscribed\",\r",
									"                \"url\",\r",
									"                \"cover\",\r",
									"                \"isTemplate\",\r",
									"                \"cardRole\"      \r",
									"            ]\r",
									"            }\r",
									"    };\r",
									"    \r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, invalid id occurred,\", function () {\r",
									"        pm.expect(pm.response.text()).to.equal('invalid id')\r",
									"        });\r",
									"\r",
									"    //Headers kontrolü.\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"    pm.environment.set('list_id', pm.environment.get('temporary_variable_list_id'));\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[CARD] Get a Card')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://api.trello.com/1/lists/:list_id/cards?key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"lists",
								":list_id",
								"cards"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							],
							"variable": [
								{
									"key": "list_id",
									"value": "{{list_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://api.trello.com/1/lists/{id}/cards?key=APIKey&token=APIToken' \\\r\n  --header 'Accept: application/json'"
					},
					"response": []
				},
				{
					"name": "[CARD] Get a Card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path -\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set('temporary_variable_card_id', pm.environment.get('card_id'))\r",
									"    pm.environment.set(\"card_id\", null)\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    \r",
									"    //Headers Controlü yapılır\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"idLabels\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"idMembers\": {\r",
									"                    \"type\": \"array\"\r",
									"                }},\r",
									"        \"required\": [\r",
									"            \"id\",\r",
									"            \"idLabels\",\r",
									"            \"idMembers\"\r",
									"        ]\r",
									"    };\r",
									"    \r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"\r",
									"    pm.environment.set('card_id', jsonData.id)\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, invalid id occurred,\", function () {\r",
									"        pm.expect(pm.response.text()).to.equal('invalid id')\r",
									"        });\r",
									"\r",
									"    //Headers kontrolü.\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"\r",
									"    pm.environment.set('card_id', pm.environment.get('temporary_variable_card_id'));\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[CARD] Update a Card')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.trello.com/1/cards/:card_id?key={{key}}&token={{token}}&fields=idLabels,idMembers",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"cards",
								":card_id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "fields",
									"value": "idLabels,idMembers"
								}
							],
							"variable": [
								{
									"key": "card_id",
									"value": "{{card_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://api.trello.com/1/cards/{id}?key=APIKey&token=APIToken' \\\r\n  --header 'Accept: application/json'"
					},
					"response": []
				},
				{
					"name": "[CARD] Update a Card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path -\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set('temporary_variable_card_id', pm.environment.get('card_id'))\r",
									"    pm.environment.set(\"card_id\", null)\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    \r",
									"    //Headers Controlü yapılır\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"badges\": {\r",
									"                    \"type\": \"object\"\r",
									"                },\r",
									"                \"checkItemStates\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"closed\":{\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"boolean\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"dueComplete\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"dateLastActivity\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"desc\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"descData\": {\r",
									"                    \"type\": \"object\"\r",
									"                },\r",
									"                \"due\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"dueReminder\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"email\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"idBoard\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"idChecklists\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"idList\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"idMembers\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"idMembersVoted\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"idShort\": {\r",
									"                    \"type\": \"number\"\r",
									"                },\r",
									"                \"idAttachmentCover\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"labels\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"idLabels\": {\r",
									"                    \"type\": \"array\"\r",
									"                },\r",
									"                \"manualCoverAttachment\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"pinned\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"pos\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"number\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"shortLink\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"shortUrl\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"start\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                \"subscribed\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"url\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"cover\": {\r",
									"                    \"type\": \"object\"\r",
									"                },\r",
									"                \"isTemplate\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"cardRole\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                }            \r",
									"                },\r",
									"            \"required\": [\r",
									"                \"id\",\r",
									"                \"badges\",\r",
									"                \"checkItemStates\",\r",
									"                \"closed\",\r",
									"                \"dueComplete\",\r",
									"                \"dateLastActivity\",\r",
									"                \"desc\",\r",
									"                \"descData\",\r",
									"                \"due\",\r",
									"                \"dueReminder\",\r",
									"                \"email\",\r",
									"                \"idBoard\",\r",
									"                \"idChecklists\",\r",
									"                \"idList\",\r",
									"                \"idMembers\",\r",
									"                \"idMembersVoted\",\r",
									"                \"idShort\",\r",
									"                \"idAttachmentCover\",\r",
									"                \"labels\",\r",
									"                \"idLabels\",\r",
									"                \"manualCoverAttachment\",\r",
									"                \"name\",\r",
									"                \"pinned\",\r",
									"                \"pos\",\r",
									"                \"shortLink\",\r",
									"                \"shortUrl\",\r",
									"                \"start\",\r",
									"                \"subscribed\",\r",
									"                \"url\",\r",
									"                \"cover\",\r",
									"                \"isTemplate\",\r",
									"                \"cardRole\"      \r",
									"            ]\r",
									"    };\r",
									"    \r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"\r",
									"    pm.environment.set('card_id', jsonData.id)\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, invalid id occurred,\", function () {\r",
									"        pm.expect(pm.response.text()).to.equal('invalid id')\r",
									"        });\r",
									"\r",
									"    //Headers kontrolü.\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"\r",
									"    pm.environment.set('card_id', pm.environment.get('temporary_variable_card_id'));\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[CARD-CHECKLIST] Create a Checklist in a Card')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://api.trello.com/1/cards/:card_id?key={{key}}&token={{token}}&name=UpdatedCardName",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"cards",
								":card_id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "name",
									"value": "UpdatedCardName"
								}
							],
							"variable": [
								{
									"key": "card_id",
									"value": "{{card_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request PUT \\\r\n  --url 'https://api.trello.com/1/cards/{id}?key=APIKey&token=APIToken' \\\r\n  --header 'Accept: application/json'"
					},
					"response": []
				},
				{
					"name": "[CARD-CHECKLIST] Create a Checklist in a Card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const neww = pm.require('@speeding-eclipse-222630/neww');\r",
									"let randomNameForCheckListSendRequest = neww.generateRandomNameForBoard(8)\r",
									"pm.environment.set('checklist_name', randomNameForCheckListSendRequest);\r",
									"\r",
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path -\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set('temporary_variable_card_id', pm.environment.get('card_id'))\r",
									"    pm.environment.set(\"card_id\", null)\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {
									"@speeding-eclipse-222630/neww": {
										"id": "0192ce4c-2ff9-73db-8a3b-e0d59696f140"
									}
								}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    \r",
									"    //Headers Controlü yapılır\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"idBoard\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"idCard\": {\r",
									"                    \"type\": \"string\"\r",
									"                },  \r",
									"                \"pos\": {\r",
									"                    \"type\": \"number\"\r",
									"                },  \r",
									"                \"checkItems\": {\r",
									"                    \"type\": \"array\"\r",
									"                },            \r",
									"                },\r",
									"            \"required\": [\r",
									"                \"id\",\r",
									"                \"name\",\r",
									"                \"idBoard\",\r",
									"                \"idCard\",\r",
									"                \"pos\",    \r",
									"                \"checkItems\",   \r",
									"            ]\r",
									"    };\r",
									"    \r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"\r",
									"    pm.environment.set('checklist_id', jsonData.id)\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, invalid id occurred,\", function () {\r",
									"        pm.expect(pm.response.text()).to.equal('invalid id')\r",
									"        });\r",
									"\r",
									"    //Headers kontrolü.\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"\r",
									"    pm.environment.set('card_id', pm.environment.get('temporary_variable_card_id'));\r",
									"\r",
									"    let randomNameForCheckListSendRequest = pm.environment.get('checklist_name')\r",
									"    let idCardForCheckListSendRequest = pm.environment.get('card_id');\r",
									"    let token = pm.collectionVariables.get('token');\r",
									"    let key = pm.collectionVariables.get('key');\r",
									"\r",
									"    let url = `https://api.trello.com/1/cards/${idCardForCheckListSendRequest}/checklists?name=${randomNameForCheckListSendRequest}&token=${token}&key=${key}`;\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: url,\r",
									"        method: \"POST\"\r",
									"    }, function (err, response) {\r",
									"        if (err) {\r",
									"            console.log('Hata:', err);\r",
									"            return;\r",
									"        }\r",
									"        const jsonData = response.json();\r",
									"        pm.environment.set('checklist_id', jsonData.id)\r",
									"        console.log(pm.environment.get('checklist_id'))\r",
									"        });\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[CARD-CHECKLIST-CHECKITEM] Create a CheckItem on a Checklist')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/cards/:card_id/checklists?key={{key}}&token={{token}}&name={{checklist_name}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"cards",
								":card_id",
								"checklists"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "name",
									"value": "{{checklist_name}}"
								}
							],
							"variable": [
								{
									"key": "card_id",
									"value": "{{card_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request POST \\\r\n  --url 'https://api.trello.com/1/cards/{id}/checklists?key=APIKey&token=APIToken'"
					},
					"response": []
				},
				{
					"name": "[CARD-CHECKLIST-CHECKITEM] Create a CheckItem on a Checklist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const neww = pm.require('@speeding-eclipse-222630/neww');\r",
									"let randomNameForCheckItemNameSendRequest = neww.generateRandomNameForBoard(4)\r",
									"pm.environment.set('check_item_name', randomNameForCheckItemNameSendRequest);\r",
									"\r",
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path - \r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set('temporary_variable_checklist_id', pm.environment.get('checklist_id'))\r",
									"    pm.environment.set(\"checklist_id\", null)\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {
									"@speeding-eclipse-222630/neww": {
										"id": "0192ce4c-2ff9-73db-8a3b-e0d59696f140"
									}
								}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const neww = pm.require('@speeding-eclipse-222630/neww');\r",
									"\r",
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    \r",
									"    //Headers Controlü yapılır\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"nameData\": {\r",
									"                    \"type\": \"object\"\r",
									"                },\r",
									"                \"pos\": {\r",
									"                    \"type\": \"number\"\r",
									"                },  \r",
									"                \"state\": {\r",
									"                    \"type\": \"string\"\r",
									"                },  \r",
									"                \"due\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },   \r",
									"                \"dueReminder\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                }, \r",
									"                \"idMember\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                }, \r",
									"                \"idChecklist\": {\r",
									"                    \"type\": \"string\"\r",
									"                },    \r",
									"                \"limits\": {\r",
									"                    \"type\": \"object\"\r",
									"                },        \r",
									"                },\r",
									"            \"required\": [\r",
									"                \"id\",\r",
									"                \"name\",\r",
									"                \"nameData\",\r",
									"                \"pos\",\r",
									"                \"state\",\r",
									"                \"due\",\r",
									"                \"dueReminder\",\r",
									"                \"idMember\",\r",
									"                \"idChecklist\",\r",
									"                \"limits\"\r",
									"            ]\r",
									"    };\r",
									"    \r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"\r",
									"    pm.environment.set('check_item_id', jsonData.id)\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, invalid id occurred,\", function () {\r",
									"        pm.expect(pm.response.text()).to.equal('invalid id')\r",
									"        });\r",
									"\r",
									"    //Headers kontrolü.\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"\r",
									"    pm.environment.set('checklist_id', pm.environment.get('temporary_variable_checklist_id'));\r",
									"\r",
									"    let randomNameForCheckItemNameSendRequest = neww.generateRandomNameForBoard(4);\r",
									"    let idChecklistForCheckListSendRequest = pm.environment.get('checklist_id');\r",
									"    let token = pm.collectionVariables.get('token');\r",
									"    let key = pm.collectionVariables.get('key');\r",
									"\r",
									"    let url = `https://api.trello.com/1/checklists/${idChecklistForCheckListSendRequest}/checkItems?name=${randomNameForCheckItemNameSendRequest}&token=${token}&key=${key}`;\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: url,\r",
									"        method: \"POST\"\r",
									"    }, function (err, response) {\r",
									"        if (err) {\r",
									"            console.log('Hata:', err);\r",
									"            return;\r",
									"        }\r",
									"        const jsonData = response.json();\r",
									"        pm.environment.set('check_item_id', jsonData.id)\r",
									"        pm.environment.set('checklist_id', pm.environment.get('temporary_variable_checklist_id'))\r",
									"        });\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[CARD-CHECKLIST] Get a Checklist')\r",
									""
								],
								"type": "text/javascript",
								"packages": {
									"@speeding-eclipse-222630/neww": {
										"id": "0192ce4c-2ff9-73db-8a3b-e0d59696f140"
									}
								}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/checklists/:checklist_id/checkItems?name={{check_item_name}}&key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"checklists",
								":checklist_id",
								"checkItems"
							],
							"query": [
								{
									"key": "name",
									"value": "{{check_item_name}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							],
							"variable": [
								{
									"key": "checklist_id",
									"value": "{{checklist_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request POST \\\r\n  --url 'https://api.trello.com/1/checklists/{id}/checkItems?name={name}&key=APIKey&token=APIToken'"
					},
					"response": []
				},
				{
					"name": "[CARD-CHECKLIST] Get a Checklist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path -\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set('temporary_variable_checklist_id', pm.environment.get('checklist_id'))\r",
									"    pm.environment.set(\"checklist_id\", null)\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    \r",
									"    //Headers Controlü yapılır\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"idBoard\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"idCard\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"pos\": {\r",
									"                    \"type\": \"number\"\r",
									"                },\r",
									"                \"checkItems\": {\r",
									"                    \"type\": \"array\"\r",
									"                }},\r",
									"        \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"idBoard\",\r",
									"            \"idCard\",\r",
									"            \"pos\",\r",
									"            \"checkItems\"\r",
									"        ]\r",
									"    };\r",
									"    \r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"\r",
									"    pm.environment.set('checklist_id', jsonData.id)\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, invalid id occurred,\", function () {\r",
									"        pm.expect(pm.response.text()).to.equal('invalid id')\r",
									"        });\r",
									"\r",
									"    //Headers kontrolü.\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"\r",
									"    pm.environment.set('checklist_id', pm.environment.get('temporary_variable_checklist_id'));\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[CARD-CHECKLIST] Get checkitems in a Checklist')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/checklists/:checklist?key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"checklists",
								":checklist"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							],
							"variable": [
								{
									"key": "checklist",
									"value": "{{checklist_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://api.trello.com/1/checklists/{id}?key=APIKey&token=APIToken'"
					},
					"response": []
				},
				{
					"name": "[CARD-CHECKLIST] Get checkitems in a Checklist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path -\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set('temporary_variable_checklist_id', pm.environment.get('checklist_id'))\r",
									"    pm.environment.set(\"checklist_id\", null)\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    \r",
									"    //Headers Controlü yapılır\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"id\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"nameData\": {\r",
									"                        \"type\": \"object\"\r",
									"                    },\r",
									"                    \"pos\": {\r",
									"                        \"type\": \"number\"\r",
									"                    },\r",
									"                    \"idChecklist\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }},\r",
									"                \"required\": [\r",
									"                    \"id\",\r",
									"                    \"name\",\r",
									"                    \"nameData\",\r",
									"                    \"pos\",\r",
									"                    \"idChecklist\"\r",
									"                ]\r",
									"            }\r",
									"    };\r",
									"    \r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, invalid id occurred,\", function () {\r",
									"        pm.expect(pm.response.text()).to.equal('invalid id')\r",
									"        });\r",
									"\r",
									"    //Headers kontrolü.\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"\r",
									"    pm.environment.set('checklist_id', pm.environment.get('temporary_variable_checklist_id'));\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[CARD-CHECKLIST] Update a field on Checklist')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/checklists/:checklist_id/checkItems?token={{token}}&fields=name,nameData,pos",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"checklists",
								":checklist_id",
								"checkItems"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "fields",
									"value": "name,nameData,pos"
								}
							],
							"variable": [
								{
									"key": "checklist_id",
									"value": "{{checklist_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://api.trello.com/1/checklists/{id}/checkItems?key=APIKey&token=APIToken'"
					},
					"response": []
				},
				{
					"name": "[CARD-CHECKLIST] Update a field on Checklist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path -\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set('temporary_variable_checklist_id', pm.environment.get('checklist_id'))\r",
									"    pm.environment.set(\"checklist_id\", null)\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    \r",
									"    //Headers Controlü yapılır\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"id\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"idBoard\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"idCard\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"pos\": {\r",
									"                        \"type\": \"number\"\r",
									"                    },\r",
									"                    \"checkItems\": {\r",
									"                        \"type\": \"array\"\r",
									"                    }},\r",
									"                \"required\": [\r",
									"                    \"id\",\r",
									"                    \"name\",\r",
									"                    \"idBoard\",\r",
									"                    \"idCard\",\r",
									"                    \"pos\",\r",
									"                    \"checkItems\"\r",
									"                ]\r",
									"    };\r",
									"    \r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, invalid id occurred,\", function () {\r",
									"        pm.expect(pm.response.text()).to.equal('invalid id')\r",
									"        });\r",
									"\r",
									"    //Headers kontrolü.\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"\r",
									"    pm.environment.set('checklist_id', pm.environment.get('temporary_variable_checklist_id'));\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[CARD-CHECKITEM] Update a CheckItem on a Card')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/checklists/:checklist_id/:field_id?value=34512312&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"checklists",
								":checklist_id",
								":field_id"
							],
							"query": [
								{
									"key": "value",
									"value": "34512312"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							],
							"variable": [
								{
									"key": "checklist_id",
									"value": "{{checklist_id}}"
								},
								{
									"key": "field_id",
									"value": "pos"
								}
							]
						},
						"description": "Generated from cURL: curl --request PUT \\\r\n  --url 'https://api.trello.com/1/checklists/{id}/{field}?value={value}&key=APIKey&token=APIToken'"
					},
					"response": []
				},
				{
					"name": "[CARD-CHECKITEM] Update a CheckItem on a Card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path - \r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set('temporary_variable_card_id', pm.environment.get('card_id'))\r",
									"    pm.environment.set(\"card_id\", null)\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    \r",
									"    //Headers Controlü yapılır\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"id\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"nameData\": {\r",
									"                        \"type\": \"object\"\r",
									"                    },\r",
									"                    \"pos\": {\r",
									"                        \"type\": \"number\"\r",
									"                    },\r",
									"                    \"state\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"creationMethod\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"boolean\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                    \"due\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"boolean\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                    \"dueReminder\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"boolean\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                    \"idMember\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"boolean\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                    \"idChecklist\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }},\r",
									"                \"required\": [\r",
									"                    \"id\",\r",
									"                    \"name\",\r",
									"                    \"nameData\",\r",
									"                    \"pos\",\r",
									"                    \"state\",\r",
									"                    \"due\",\r",
									"                    \"dueReminder\",\r",
									"                    \"idMember\",\r",
									"                    \"idChecklist\"\r",
									"                ]\r",
									"    };\r",
									"    \r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, invalid id occurred,\", function () {\r",
									"        pm.expect(pm.response.text()).to.equal('invalid id')\r",
									"        });\r",
									"\r",
									"    //Headers kontrolü.\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"\r",
									"    pm.environment.set('card_id', pm.environment.get('temporary_variable_card_id'));\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[CARD-STICKER] Create a New Sticker')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/cards/:card_id/checkItem/:checkitem_id?token={{token}}&name=sdasdasa",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"cards",
								":card_id",
								"checkItem",
								":checkitem_id"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "name",
									"value": "sdasdasa"
								}
							],
							"variable": [
								{
									"key": "card_id",
									"value": "{{card_id}}"
								},
								{
									"key": "checkitem_id",
									"value": "{{check_item_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request PUT \\\r\n  --url 'https://api.trello.com/1/cards/{id}/checkItem/{idCheckItem}?key=APIKey&token=APIToken'"
					},
					"response": []
				},
				{
					"name": "[CARD-STICKER] Create a New Sticker",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path - \r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set('temporary_variable_card_id', pm.environment.get('card_id'))\r",
									"    pm.environment.set(\"card_id\", null)\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    \r",
									"    //Headers Controlü yapılır\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"limits\": {\r",
									"                        \"type\": \"object\"\r",
									"                    },\r",
									"                    \"id\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"top\": {\r",
									"                        \"type\": \"number\"\r",
									"                    },\r",
									"                    \"left\": {\r",
									"                        \"type\": \"number\"\r",
									"                    },\r",
									"                    \"zIndex\": {\r",
									"                        \"type\": \"number\"\r",
									"                    },\r",
									"                    \"rotate\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"number\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                    \"image\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                    \"imageUrl\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"string\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                },\r",
									"                    \"imageScaled\": {\r",
									"                    \"oneOf\": [\r",
									"                        {\"type\": \"array\"},\r",
									"                        {\"type\": \"null\"},\r",
									"                    ]\r",
									"                }},\r",
									"                \"required\": [\r",
									"                    \"limits\",\r",
									"                    \"id\",\r",
									"                    \"top\",\r",
									"                    \"left\",\r",
									"                    \"zIndex\",\r",
									"                    \"rotate\",\r",
									"                    \"image\",\r",
									"                    \"imageUrl\",\r",
									"                    \"imageScaled\"\r",
									"                ]\r",
									"    };\r",
									"    \r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, invalid id occurred,\", function () {\r",
									"        pm.expect(pm.response.text()).to.equal('invalid id')\r",
									"        });\r",
									"\r",
									"    //Headers kontrolü.\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"\r",
									"    pm.environment.set('card_id', pm.environment.get('temporary_variable_card_id'));\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest('[CARD-COMMENT] Create a New Comment to a Card')\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/cards/:cards_id/stickers?image=taco-cool&top=20&left=20&zIndex=999&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"cards",
								":cards_id",
								"stickers"
							],
							"query": [
								{
									"key": "image",
									"value": "taco-cool"
								},
								{
									"key": "top",
									"value": "20"
								},
								{
									"key": "left",
									"value": "20"
								},
								{
									"key": "zIndex",
									"value": "999"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							],
							"variable": [
								{
									"key": "cards_id",
									"value": "{{card_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request POST \\\r\n  --url 'https://api.trello.com/1/cards/{id}/stickers?image={image}&top={top}&left={left}&zIndex={zIndex}&key=APIKey&token=APIToken'"
					},
					"response": []
				},
				{
					"name": "[CARD-COMMENT] Create a New Comment to a Card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//happy path\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"}\r",
									"\r",
									"//sad path -\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    pm.environment.set('temporary_variable_card_id', pm.environment.get('card_id'))\r",
									"    pm.environment.set(\"card_id\", null)\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Happy Path - ortam değişkeni kontrolü yapılır Environment ile.\r",
									"if (pm.environment.get('ortam_degiskeni') === 'happy'){\r",
									"    // response JSON'ı çekilir.\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Status Code kontrolü yapılır. 200 beklenir.\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    \r",
									"    //Headers Controlü yapılır\r",
									"    pm.test(\"Content-Type header is Application/Json\", () =>\r",
									"    {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"    //Schema kontrolü yapılır\r",
									"    pm.test(\"Schema is correct!\", function() \r",
									"    {\r",
									"        const schema = {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"id\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"idMemberCreator\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"data\": {\r",
									"                        \"type\": \"object\"\r",
									"                    },\r",
									"                    \"appCreator\": {\r",
									"                        \"type\": \"object\"\r",
									"                    },\r",
									"                    \"type\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"date\": {\r",
									"                        \"oneOf\": [\r",
									"                                    {\"type\": \"string\"},\r",
									"                                    {\"type\": \"null\"},\r",
									"                                ]\r",
									"                            },\r",
									"                    \"limits\": {\r",
									"                        \"oneOf\": [\r",
									"                                    {\"type\": \"object\"},\r",
									"                                    {\"type\": \"null\"},\r",
									"                                ]\r",
									"                            },\r",
									"                    \"display\": {\r",
									"                        \"oneOf\": [\r",
									"                            {\"type\": \"object\"},\r",
									"                            {\"type\": \"null\"},\r",
									"                        ]\r",
									"                    },\r",
									"                    \"entities\": {\r",
									"                            \"oneOf\": [\r",
									"                                {\"type\": \"array\"},\r",
									"                                {\"type\": \"null\"},\r",
									"                            ]\r",
									"                        },\r",
									"                    \"memberCreator\": {\r",
									"                            \"oneOf\": [\r",
									"                                {\"type\": \"object\"},\r",
									"                                {\"type\": \"null\"},\r",
									"                            ]\r",
									"                        }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"id\",\r",
									"                    \"idMemberCreator\",\r",
									"                    \"data\",\r",
									"                    \"appCreator\",\r",
									"                    \"type\",\r",
									"                    \"date\",\r",
									"                    \"limits\",\r",
									"                    \"display\",\r",
									"                    \"entities\",\r",
									"                    \"memberCreator\"\r",
									"                ]\r",
									"    };\r",
									"    \r",
									"    //Oluşturduğumuz Schema örneğini, response'ta gelen schema örneği ile karşılaştırıyoruz.\r",
									"    const Ajv = require(\"ajv\");\r",
									"    const ajv = new Ajv();\r",
									"\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(jsonData);\r",
									"\r",
									"    pm.expect(valid, validate.errors).to.be.true;\r",
									"    });   \r",
									"    });\r",
									"}\r",
									"\r",
									"//Sad Path - ortam değişkeni kontrolü yapılır Environment ile\r",
									"else if (pm.environment.get('ortam_degiskeni') === 'sad'){\r",
									"    // Status Code kontrolü yapılır. 400 beklenir.\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        });\r",
									"\r",
									"    // JSON Body kontrolü yapılır.\r",
									"    pm.test(\"As expected, invalid id occurred,\", function () {\r",
									"        pm.expect(pm.response.text()).to.equal('invalid id')\r",
									"        });\r",
									"\r",
									"    //Headers kontrolü.\r",
									"    pm.test(\"Content-Type header is text/plain\", () =>\r",
									"        {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
									"        });\r",
									"\r",
									"    pm.environment.set('card_id', pm.environment.get('temporary_variable_card_id'));\r",
									"}\r",
									"// invalid id 400\r",
									"\r",
									"pm.execution.setNextRequest(null)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://api.trello.com/1/cards/:card_id/actions/comments?text=Bu benim commentim BE ile attığım.&key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"cards",
								":card_id",
								"actions",
								"comments"
							],
							"query": [
								{
									"key": "text",
									"value": "Bu benim commentim BE ile attığım."
								},
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							],
							"variable": [
								{
									"key": "card_id",
									"value": "{{card_id}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request POST \\\r\n  --url 'https://api.trello.com/1/cards/{id}/actions/comments?text={text}&key=APIKey&token=APIToken' \\\r\n  --header 'Accept: application/json'"
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{key}}",
				"type": "string"
			},
			{
				"key": "in",
				"value": "query",
				"type": "string"
			},
			{
				"key": "key",
				"value": "key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "key",
			"value": "",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "board_id",
			"value": "671105356df283053aec9dd4",
			"type": "string"
		},
		{
			"key": "list_id",
			"value": "671398c9605e97daa05b7a7a",
			"type": "string"
		},
		{
			"key": "card_id",
			"value": "6714f8887cb892619507d797",
			"type": "string"
		},
		{
			"key": "checklist_id",
			"value": "6714fbb38508172289664ee8",
			"type": "string"
		},
		{
			"key": "board_name",
			"value": "Bu Board Name'in Initial Value'sudur.",
			"type": "string"
		},
		{
			"key": "update_name",
			"value": "Name",
			"type": "string"
		},
		{
			"key": "update_desc",
			"value": "Description",
			"type": "string"
		},
		{
			"key": "env",
			"value": "happy_path",
			"type": "string"
		},
		{
			"key": "list_name",
			"value": "List Name on a Board",
			"type": "string"
		}
	]
}